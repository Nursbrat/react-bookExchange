import React, { useEffect, useState } from "react";
import Profcontainer from "../../components/Profcontainer/Profcontainer";
import { useParams, useNavigate } from "react-router-dom";
import { useGetBookByIdQuery, useUpdateBookMutation } from "../../api/apiSlice";
import { PiCaretRightBold } from "react-icons/pi";
import { images } from "../../constants";
import { Toaster, toast } from "react-hot-toast";
import "./EditPage.scss";

const EditPage = () => {
  const { id } = useParams();
  const navigate = useNavigate();

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–¥–Ω–æ–π –∫–Ω–∏–≥–µ
  const { data: book } = useGetBookByIdQuery(id);
  const [updateBook, { isLoading }] = useUpdateBookMutation();

  const [newBookData, setNewBookData] = useState({
    images: [],
    description: "",
    title: "",
    author: "",
    genre: "",
    publishedYear: "",
    language: "",
    condition: "",
  });

  useEffect(() => {
    if (book) {
      setNewBookData({
        images: book.images,
        description: book.description,
        title: book.title,
        author: book.author,
        genre: book.genre,
        publishedYear: book.publishedYear,
        language: book.language,
        condition: book.condition,
      });
    }
  }, [book]);

  const handleNavigateAfterDelay = () => {
    setTimeout(() => {
      navigate(-1);
    }, 4000);
  };

  // inputs
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewBookData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleSelectChange = (e) => {
    const { name, value } = e.target;
    setNewBookData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleFileChange = async (e) => {
    const files = e.target.files;
    if (files) {
      const filesArray = [];

      for (const file of files) {
        filesArray.push(file);
      }

      setNewBookData((prevData) => ({
        ...prevData,
        images: filesArray,
      }));
    }
  };

  // submit
  const handleFormSubmit = async (e) => {
    e.preventDefault();

    if (
      !newBookData.images.length ||
      !newBookData.description ||
      !newBookData.title ||
      !newBookData.author ||
      !newBookData.genre ||
      !newBookData.language ||
      !newBookData.condition
    ) {
      toast.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");
      return;
    }

    const updatedBook = {
      id: newBookData.id,
      images: newBookData.images,
      description: newBookData.description,
      title: newBookData.title,
      author: newBookData.author,
      genre: newBookData.genre,
      publishedYear: newBookData.publishedYear,
      language: newBookData.language,
      condition: newBookData.condition,
    };
    toast
      .promise(updateBook(updatedBook).unwrap(), {
        loading: "–ó–∞–≥—Ä—É–∑–∫–∞...",
        success: () => {
          return <b>–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>;
        },
        error: <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏!</b>,
      })
      .then(() => {
        toast("–í–∞—Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É!", {
          icon: "üîÑ",
        });
        handleNavigateAfterDelay();
      });
  };

  return (
    <div>
      <Toaster containerStyle={{ backgroundColor: "transparent" }} />
      <Profcontainer
        pageTitle="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–∏–≥—É"
        addBookTitle="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ö–Ω–∏–≥—É"
        addBookSubitle="–ò–∑–º–µ–Ω–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–Ω–∏–≥–∏"
      >
        <div className="addBook">
          <div className="addBook-container">
            <div className="addBook__form">
              <div className="addBook__cover">
                <p className="label">
                  –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–Ω–µ –±–æ–ª–µ–µ 7){" "}
                  {newBookData.images?.length > 0 ? (
                    <span style={{ fontSize: "1.3rem" }}>
                      –î–û–ë–ê–í–õ–ï–ù–û ({newBookData.images.length})
                    </span>
                  ) : null}
                </p>
                <label htmlFor="add-picture">
                  <div className="add-picture">
                    <img src={images.img} />
                    <p className="add-picture__descr">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</p>
                    <input
                      name="images"
                      type="file"
                      id="add-picture"
                      className="add-file"
                      onChange={handleFileChange}
                      multiple
                      accept="image/*"
                    />
                  </div>
                </label>
              </div>
              <div className="addBook__description">
                <label className="label">–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"
                  className="addBook2__description-input"
                  name="description"
                  value={newBookData.description}
                  onChange={handleInputChange}
                ></textarea>
              </div>

              <label htmlFor="book-name">–ù–∞–∑–≤–∞–Ω–∏–µ</label>
              <input
                type="text"
                id="book-name"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"
                name="title"
                value={newBookData.title}
                onChange={handleInputChange}
                required
              />
              <label htmlFor="book-author">–ê–≤—Ç–æ—Ä</label>
              <input
                type="text"
                id="book-author"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏"
                name="author"
                value={newBookData.author}
                onChange={handleInputChange}
                required
              />
              <label htmlFor="book-published-year">–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è</label>
              <input
                type="text"
                id="book-published-year"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –∏–∑–¥–∞–Ω–∏—è –∫–Ω–∏–≥–∏"
                name="publishedYear"
                value={newBookData.publishedYear}
                onChange={handleInputChange}
                required
              />
              <label htmlFor="book-language">–Ø–∑—ã–∫</label>

              <select
                id="book-language"
                name="language"
                value={newBookData.language}
                onChange={handleInputChange}
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫</option>
                <option value="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π">–ê–Ω–≥–ª–∏–π—Å–∫–∏–π</option>
                <option value="–†—É—Å—Å–∫–∏–π">–†—É—Å—Å–∫–∏–π</option>
                <option value="–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π">–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π</option>
                <option value="–¢—É—Ä–µ—Ü–∫–∏–π">–¢—É—Ä–µ—Ü–∫–∏–π</option>
                <option value="–ö–∞–∑–∞—Ö—Å–∫–∏–π">–ö–∞–∑–∞—Ö—Å–∫–∏–π</option>
                <option value="–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π">–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π</option>
                <option value="–ù–µ–º–µ—Ü–∫–∏–π">–ù–µ–º–µ—Ü–∫–∏–π</option>
              </select>

              <label htmlFor="book-genre">–ñ–∞–Ω—Ä</label>
              <select
                id="book-genre"
                name="genre"
                value={newBookData.genre}
                onChange={handleSelectChange}
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä</option>
                <option value="–†–æ–º–∞–Ω">–†–æ–º–∞–Ω</option>
                <option value="–§—ç–Ω—Ç–µ–∑–∏">–§—ç–Ω—Ç–µ–∑–∏</option>
                <option value="–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ">–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ</option>
                <option value="–î–µ—Ç–µ–∫—Ç–∏–≤">–î–µ—Ç–µ–∫—Ç–∏–≤</option>
                <option value="–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞">–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞</option>
                <option value="–£–∂–∞—Å—ã">–£–∂–∞—Å—ã</option>
                <option value="–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π">–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π</option>
                <option value="–ö–æ–º–µ–¥–∏—è">–ö–æ–º–µ–¥–∏—è</option>
                <option value="–î—Ä–∞–º–∞">–î—Ä–∞–º–∞</option>
                <option value="–ë–∏–æ–≥—Ä–∞—Ñ–∏—è">–ë–∏–æ–≥—Ä–∞—Ñ–∏—è</option>
                <option value="–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ">–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ</option>
                <option value="–ü–æ—ç–∑–∏—è">–ü–æ—ç–∑–∏—è</option>
              </select>
              <label htmlFor="book-condition">–°–æ—Å—Ç–æ—è–Ω–∏–µ</label>
              <select
                id="book-condition"
                name="condition"
                value={newBookData.condition}
                onChange={handleSelectChange}
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</option>
                <option value="–•–æ—Ä–æ—à–µ–µ">–•–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</option>
                <option value="–°—Ä–µ–¥–Ω–µ–µ">–°—Ä–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</option>
                <option value="–ü–ª–æ—Ö–æ–µ">–ü–ª–æ—Ö–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</option>
              </select>

              <div className="step-btn">
                <button
                  type="button"
                  className="next-link"
                  disabled={isLoading}
                  onClick={handleFormSubmit}
                >
                  {isLoading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"}
                  <PiCaretRightBold className="next-icon" />
                </button>
              </div>
            </div>
          </div>
        </div>
      </Profcontainer>
    </div>
  );
};

export default EditPage;
